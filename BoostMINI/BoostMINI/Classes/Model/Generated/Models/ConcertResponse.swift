//
// ConcertResponse.swift
//
// Generated by swagger-codegen
// Modified by dk (dk@devrock.co.kr)
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ConcertResponse: BaseModel {
	// autogen apiList protocol
	static var apiList: [String: APIRequest] = ConcertResponse.buildApiRequests()


    public enum ConcertStatus: String, Codable { 
        case before = "BEFORE"
        case progressing = "PROGRESSING"
        case end = "END"
    }
    public var concertDate: String?
    public var concertId: Int64?
    public var concertNm: String?
    public var concertPlace: String?
    public var concertStatus: ConcertStatus?
    public var dday: Int?


    
    public init(concertDate: String?, concertId: Int64?, concertNm: String?, concertPlace: String?, concertStatus: ConcertStatus?, dday: Int?) {
        self.concertDate = concertDate
        self.concertId = concertId
        self.concertNm = concertNm
        self.concertPlace = concertPlace
        self.concertStatus = concertStatus
        self.dday = dday
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(concertDate, forKey: "concertDate")
        try container.encodeIfPresent(concertId, forKey: "concertId")
        try container.encodeIfPresent(concertNm, forKey: "concertNm")
        try container.encodeIfPresent(concertPlace, forKey: "concertPlace")
        try container.encodeIfPresent(concertStatus, forKey: "concertStatus")
        try container.encodeIfPresent(dday, forKey: "dday")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        concertDate = try container.decodeIfPresent(String.self, forKey: "concertDate")
        concertId = try container.decodeIfPresent(Int64.self, forKey: "concertId")
        concertNm = try container.decodeIfPresent(String.self, forKey: "concertNm")
        concertPlace = try container.decodeIfPresent(String.self, forKey: "concertPlace")
        concertStatus = try container.decodeIfPresent(ConcertStatus.self, forKey: "concertStatus")
        dday = try container.decodeIfPresent(Int.self, forKey: "dday")
    }
}

