//
// AccountsPostResponse.swift
//
// Generated by swagger-codegen
// Modified by dk (dk@devrock.co.kr)
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AccountsPostResponse: BaseModel {
	// autogen apiList protocol
	static var apiList: [String: APIRequest] = AccountsPostResponse.buildApiRequests()


    public enum AccountType: String, Codable { 
        case general = "GENERAL"
        case admin = "ADMIN"
    }
    public var accountType: AccountType?
    public var alarm: Bool?
    public var createdAt: String?
    public var email: String?
    public var id: Int64?
    public var name: String?


    
    public init(accountType: AccountType?, alarm: Bool?, createdAt: String?, email: String?, id: Int64?, name: String?) {
        self.accountType = accountType
        self.alarm = alarm
        self.createdAt = createdAt
        self.email = email
        self.id = id
        self.name = name
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(accountType, forKey: "accountType")
        try container.encodeIfPresent(alarm, forKey: "alarm")
        try container.encodeIfPresent(createdAt, forKey: "createdAt")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        accountType = try container.decodeIfPresent(AccountType.self, forKey: "accountType")
        alarm = try container.decodeIfPresent(Bool.self, forKey: "alarm")
        createdAt = try container.decodeIfPresent(String.self, forKey: "createdAt")
        email = try container.decodeIfPresent(String.self, forKey: "email")
        id = try container.decodeIfPresent(Int64.self, forKey: "id")
        name = try container.decodeIfPresent(String.self, forKey: "name")
    }
}

