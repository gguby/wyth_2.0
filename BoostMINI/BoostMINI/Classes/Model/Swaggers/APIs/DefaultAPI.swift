//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class DefaultAPI {
    /**
     콘서트 정보 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getConcertsUsingGET(xDevice: String, acceptLanguage: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getConcertsUsingGETWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     콘서트 정보 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - returns: Observable<String>
     */
    open class func getConcertsUsingGET(xDevice: String, acceptLanguage: String) -> Observable<String> {
        return Observable.create { observer -> Disposable in
            getConcertsUsingGET(xDevice: xDevice, acceptLanguage: acceptLanguage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     콘서트 정보 가져오기
     - GET /concerts
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 

     - returns: RequestBuilder<String> 
     */
    open class func getConcertsUsingGETWithRequestBuilder(xDevice: String, acceptLanguage: String) -> RequestBuilder<String> {
        let path = "/concerts"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     도움말 목록 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter lastId: (query)  (optional)
     - parameter size: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getHelplistUsingGET(xDevice: String, acceptLanguage: String, lastId: Int64? = nil, size: Int32? = nil, completion: @escaping ((_ data: HelpGetResponse?,_ error: Error?) -> Void)) {
        getHelplistUsingGETWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage, lastId: lastId, size: size).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     도움말 목록 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter lastId: (query)  (optional)
     - parameter size: (query)  (optional)
     - returns: Observable<HelpGetResponse>
     */
    open class func getHelplistUsingGET(xDevice: String, acceptLanguage: String, lastId: Int64? = nil, size: Int32? = nil) -> Observable<HelpGetResponse> {
        return Observable.create { observer -> Disposable in
            getHelplistUsingGET(xDevice: xDevice, acceptLanguage: acceptLanguage, lastId: lastId, size: size) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     도움말 목록 가져오기
     - GET /menus/help
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter lastId: (query)  (optional)
     - parameter size: (query)  (optional)

     - returns: RequestBuilder<HelpGetResponse> 
     */
    open class func getHelplistUsingGETWithRequestBuilder(xDevice: String, acceptLanguage: String, lastId: Int64? = nil, size: Int32? = nil) -> RequestBuilder<HelpGetResponse> {
        let path = "/menus/help"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "lastId": lastId?.encodeToJSON(), 
            "size": size?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<HelpGetResponse>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     알림 리스트 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter lastId: (query)  (optional)
     - parameter size: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNoticesUsingGET(xDevice: String, acceptLanguage: String, lastId: Int64? = nil, size: Int32? = nil, completion: @escaping ((_ data: NoticesGetResponse?,_ error: Error?) -> Void)) {
        getNoticesUsingGETWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage, lastId: lastId, size: size).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     알림 리스트 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter lastId: (query)  (optional)
     - parameter size: (query)  (optional)
     - returns: Observable<NoticesGetResponse>
     */
    open class func getNoticesUsingGET(xDevice: String, acceptLanguage: String, lastId: Int64? = nil, size: Int32? = nil) -> Observable<NoticesGetResponse> {
        return Observable.create { observer -> Disposable in
            getNoticesUsingGET(xDevice: xDevice, acceptLanguage: acceptLanguage, lastId: lastId, size: size) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     알림 리스트 가져오기
     - GET /notices
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter lastId: (query)  (optional)
     - parameter size: (query)  (optional)

     - returns: RequestBuilder<NoticesGetResponse> 
     */
    open class func getNoticesUsingGETWithRequestBuilder(xDevice: String, acceptLanguage: String, lastId: Int64? = nil, size: Int32? = nil) -> RequestBuilder<NoticesGetResponse> {
        let path = "/notices"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "lastId": lastId?.encodeToJSON(), 
            "size": size?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<NoticesGetResponse>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     회원 정보
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfileUsingGET(xDevice: String, acceptLanguage: String, completion: @escaping ((_ data: ProfileGetResponse?,_ error: Error?) -> Void)) {
        getProfileUsingGETWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     회원 정보
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - returns: Observable<ProfileGetResponse>
     */
    open class func getProfileUsingGET(xDevice: String, acceptLanguage: String) -> Observable<ProfileGetResponse> {
        return Observable.create { observer -> Disposable in
            getProfileUsingGET(xDevice: xDevice, acceptLanguage: acceptLanguage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     회원 정보
     - GET /accounts/profile
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 

     - returns: RequestBuilder<ProfileGetResponse> 
     */
    open class func getProfileUsingGETWithRequestBuilder(xDevice: String, acceptLanguage: String) -> RequestBuilder<ProfileGetResponse> {
        let path = "/accounts/profile"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileGetResponse>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Test
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProfileUsingGET1(xDevice: String, acceptLanguage: String, completion: @escaping ((_ data: ProfileGetResponse?,_ error: Error?) -> Void)) {
        getProfileUsingGET1WithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     Test
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - returns: Observable<ProfileGetResponse>
     */
    open class func getProfileUsingGET1(xDevice: String, acceptLanguage: String) -> Observable<ProfileGetResponse> {
        return Observable.create { observer -> Disposable in
            getProfileUsingGET1(xDevice: xDevice, acceptLanguage: acceptLanguage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Test
     - GET /accounts/test
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 

     - returns: RequestBuilder<ProfileGetResponse> 
     */
    open class func getProfileUsingGET1WithRequestBuilder(xDevice: String, acceptLanguage: String) -> RequestBuilder<ProfileGetResponse> {
        let path = "/accounts/test"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileGetResponse>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     콘서트 좌석 정보 조회
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter type: (path) type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSettingsUsingGET(xDevice: String, acceptLanguage: String, type: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getSettingsUsingGETWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage, type: type).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     콘서트 좌석 정보 조회
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter type: (path) type 
     - returns: Observable<String>
     */
    open class func getSettingsUsingGET(xDevice: String, acceptLanguage: String, type: String) -> Observable<String> {
        return Observable.create { observer -> Disposable in
            getSettingsUsingGET(xDevice: xDevice, acceptLanguage: acceptLanguage, type: type) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     콘서트 좌석 정보 조회
     - GET /concerts/seat/{type}
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter type: (path) type 

     - returns: RequestBuilder<String> 
     */
    open class func getSettingsUsingGETWithRequestBuilder(xDevice: String, acceptLanguage: String, type: String) -> RequestBuilder<String> {
        var path = "/concerts/seat/{type}"
        path = path.replacingOccurrences(of: "{type}", with: "\(type)", options: .literal, range: nil)
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     설정 정보 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getSettingsUsingGET1(xDevice: String, acceptLanguage: String, completion: @escaping ((_ data: SettingsGetResponse?,_ error: Error?) -> Void)) {
        getSettingsUsingGET1WithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     설정 정보 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - returns: Observable<SettingsGetResponse>
     */
    open class func getSettingsUsingGET1(xDevice: String, acceptLanguage: String) -> Observable<SettingsGetResponse> {
        return Observable.create { observer -> Disposable in
            getSettingsUsingGET1(xDevice: xDevice, acceptLanguage: acceptLanguage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     설정 정보 가져오기
     - GET /settings
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 

     - returns: RequestBuilder<SettingsGetResponse> 
     */
    open class func getSettingsUsingGET1WithRequestBuilder(xDevice: String, acceptLanguage: String) -> RequestBuilder<SettingsGetResponse> {
        let path = "/settings"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SettingsGetResponse>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     앱 버전 정보 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVersionUsingGET(xDevice: String, acceptLanguage: String, completion: @escaping ((_ data: AppsGetResponse?,_ error: Error?) -> Void)) {
        getVersionUsingGETWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     앱 버전 정보 가져오기
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - returns: Observable<AppsGetResponse>
     */
    open class func getVersionUsingGET(xDevice: String, acceptLanguage: String) -> Observable<AppsGetResponse> {
        return Observable.create { observer -> Disposable in
            getVersionUsingGET(xDevice: xDevice, acceptLanguage: acceptLanguage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     앱 버전 정보 가져오기
     - GET /apps/version
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 

     - returns: RequestBuilder<AppsGetResponse> 
     */
    open class func getVersionUsingGETWithRequestBuilder(xDevice: String, acceptLanguage: String) -> RequestBuilder<AppsGetResponse> {
        let path = "/apps/version"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AppsGetResponse>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     설정 정보 저장
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postSettingsUsingPOST(xDevice: String, acceptLanguage: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        postSettingsUsingPOSTWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     설정 정보 저장
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - returns: Observable<String>
     */
    open class func postSettingsUsingPOST(xDevice: String, acceptLanguage: String) -> Observable<String> {
        return Observable.create { observer -> Disposable in
            postSettingsUsingPOST(xDevice: xDevice, acceptLanguage: acceptLanguage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     설정 정보 저장
     - POST /settings
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 

     - returns: RequestBuilder<String> 
     */
    open class func postSettingsUsingPOSTWithRequestBuilder(xDevice: String, acceptLanguage: String) -> RequestBuilder<String> {
        let path = "/settings"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter socialType
     */
    public enum SocialType_signinUsingPOST: String { 
        case smtown = "SMTOWN"
        case facebook = "FACEBOOK"
        case twitter = "TWITTER"
        case google = "GOOGLE"
    }

    /**
     로그인
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter accessToken: (query)  
     - parameter socialType: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signinUsingPOST(xDevice: String, acceptLanguage: String, accessToken: String, socialType: SocialType_signinUsingPOST, completion: @escaping ((_ data: AccountsPostResponse?,_ error: Error?) -> Void)) {
        signinUsingPOSTWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage, accessToken: accessToken, socialType: socialType).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     로그인
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter accessToken: (query)  
     - parameter socialType: (query)  
     - returns: Observable<AccountsPostResponse>
     */
    open class func signinUsingPOST(xDevice: String, acceptLanguage: String, accessToken: String, socialType: SocialType_signinUsingPOST) -> Observable<AccountsPostResponse> {
        return Observable.create { observer -> Disposable in
            signinUsingPOST(xDevice: xDevice, acceptLanguage: acceptLanguage, accessToken: accessToken, socialType: socialType) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     로그인
     - POST /accounts/signin
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter accessToken: (query)  
     - parameter socialType: (query)  

     - returns: RequestBuilder<AccountsPostResponse> 
     */
    open class func signinUsingPOSTWithRequestBuilder(xDevice: String, acceptLanguage: String, accessToken: String, socialType: SocialType_signinUsingPOST) -> RequestBuilder<AccountsPostResponse> {
        let path = "/accounts/signin"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "accessToken": accessToken, 
            "socialType": socialType.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AccountsPostResponse>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     로그아웃
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signoutUsingDELETE(xDevice: String, acceptLanguage: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        signoutUsingDELETEWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     로그아웃
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - returns: Observable<String>
     */
    open class func signoutUsingDELETE(xDevice: String, acceptLanguage: String) -> Observable<String> {
        return Observable.create { observer -> Disposable in
            signoutUsingDELETE(xDevice: xDevice, acceptLanguage: acceptLanguage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     로그아웃
     - DELETE /accounts/signout
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 

     - returns: RequestBuilder<String> 
     */
    open class func signoutUsingDELETEWithRequestBuilder(xDevice: String, acceptLanguage: String) -> RequestBuilder<String> {
        let path = "/accounts/signout"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter socialType
     */
    public enum SocialType_signupUsingPOST: String { 
        case smtown = "SMTOWN"
        case facebook = "FACEBOOK"
        case twitter = "TWITTER"
        case google = "GOOGLE"
    }

    /**
     회원 가입
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter accessToken: (query)  
     - parameter socialType: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func signupUsingPOST(xDevice: String, acceptLanguage: String, accessToken: String, socialType: SocialType_signupUsingPOST, completion: @escaping ((_ data: AccountsPostResponse?,_ error: Error?) -> Void)) {
        signupUsingPOSTWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage, accessToken: accessToken, socialType: socialType).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     회원 가입
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter accessToken: (query)  
     - parameter socialType: (query)  
     - returns: Observable<AccountsPostResponse>
     */
    open class func signupUsingPOST(xDevice: String, acceptLanguage: String, accessToken: String, socialType: SocialType_signupUsingPOST) -> Observable<AccountsPostResponse> {
        return Observable.create { observer -> Disposable in
            signupUsingPOST(xDevice: xDevice, acceptLanguage: acceptLanguage, accessToken: accessToken, socialType: socialType) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     회원 가입
     - POST /accounts/signup
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter accessToken: (query)  
     - parameter socialType: (query)  

     - returns: RequestBuilder<AccountsPostResponse> 
     */
    open class func signupUsingPOSTWithRequestBuilder(xDevice: String, acceptLanguage: String, accessToken: String, socialType: SocialType_signupUsingPOST) -> RequestBuilder<AccountsPostResponse> {
        let path = "/accounts/signup"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "accessToken": accessToken, 
            "socialType": socialType.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AccountsPostResponse>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     탈퇴
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func withdrawUsingDELETE(xDevice: String, acceptLanguage: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        withdrawUsingDELETEWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     탈퇴
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - returns: Observable<String>
     */
    open class func withdrawUsingDELETE(xDevice: String, acceptLanguage: String) -> Observable<String> {
        return Observable.create { observer -> Disposable in
            withdrawUsingDELETE(xDevice: xDevice, acceptLanguage: acceptLanguage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     탈퇴
     - DELETE /accounts/withdraw
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 

     - returns: RequestBuilder<String> 
     */
    open class func withdrawUsingDELETEWithRequestBuilder(xDevice: String, acceptLanguage: String) -> RequestBuilder<String> {
        let path = "/accounts/withdraw"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
