//
// JSONDataEncoding.swift
//
// Generated by swagger-codegen
// Modified by dk (dk@devrock.co.kr)
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire

public struct JSONDataEncoding: ParameterEncoding {

    // MARK: Properties

    static let jsonDataKey = "jsonData"

    // MARK: Encoding

    /// Creates a URL request by encoding parameters and applying them onto an existing request.
    ///
    /// - parameter urlRequest: The request to have parameters applied.
    /// - parameter parameters: The parameters to apply. This should have a single key/value
    ///                         pair with "jsonData" as the key and a Data object as the value.
    ///
    /// - throws: An `Error` if the encoding process encounters an error.
    ///
    /// - returns: The encoded request.
    public func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -> URLRequest {
        var urlRequest = try urlRequest.asURLRequest()

        if urlRequest.value(forHTTPHeaderField: "Content-Type") == nil {
            urlRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
        }
        
//        guard let jsonData = parameters?[JSONDataEncoding.jsonDataKey] as? Data, !jsonData.isEmpty else {
//            return urlRequest.asURLRequestWithParams(parameters)
//        }
        
//        guard let jsonData = parameters?[JSONDataEncoding.jsonDataKey] as? Data, !jsonData.isEmpty else {
//            return urlRequest
//        }
        
//        guard let jsonData = parameters?[JSONDataEncoding.jsonDataKey] as? Data, !jsonData.isEmpty else {
//        let jsonParam = JSONDataEncoding.encodingParameters(jsonData:)
//        guard  else {
//            return urlRequest.asURLRequestWithParams(parameters)
//        }
        
//        let jsonParam = JSONEncodingHelper.encodingParameters(forEncodableObject: parameters)
//        guard let jsonData = jsonParam?[JSONDataEncoding.jsonDataKey] as? Data, !jsonData.isEmpty else {
//            return urlRequest.asURLRequestWithParams(parameters)
//        }
        
//        guard let jsonData = jsonParam?[JSONDataEncoding.jsonDataKey] as? Data else {
//        }
        do {
            let jsonData = try JSONSerialization.data(withJSONObject: "1", options: .prettyPrinted)
            urlRequest.httpBody = jsonData

        } catch {
            BSTError.convertError.cookError()
        }


        return urlRequest.asURLRequestWithParams(parameters)
    }

    public static func encodingParameters(jsonData: Data?) -> Parameters? {
        var returnedParams: Parameters? = nil
        if let jsonData = jsonData, !jsonData.isEmpty {
            var params = Parameters()
            params[jsonDataKey] = jsonData
            returnedParams = params
        }
        return returnedParams
    }

}
