//
// ConnectcontrollerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift



open class ConnectcontrollerAPI {
    /**
     connect
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connectUsingPOST(xDevice: String, acceptLanguage: String, providerId: String, completion: @escaping ((_ data: RedirectView?,_ error: Error?) -> Void)) {
        connectUsingPOSTWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage, providerId: providerId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     connect
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 
     - returns: Observable<RedirectView>
     */
    open class func connectUsingPOST(xDevice: String, acceptLanguage: String, providerId: String) -> Observable<RedirectView> {
        return Observable.create { observer -> Disposable in
            connectUsingPOST(xDevice: xDevice, acceptLanguage: acceptLanguage, providerId: providerId) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     connect
     - POST /connect/{providerId}
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 

     - returns: RequestBuilder<RedirectView> 
     */
    open class func connectUsingPOSTWithRequestBuilder(xDevice: String, acceptLanguage: String, providerId: String) -> RequestBuilder<RedirectView> {
        var path = "/connect/{providerId}"
        path = path.replacingOccurrences(of: "{providerId}", with: "\(providerId)", options: .literal, range: nil)
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RedirectView>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     connectionStatus
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connectionStatusUsingGET(xDevice: String, acceptLanguage: String, providerId: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        connectionStatusUsingGETWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage, providerId: providerId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     connectionStatus
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 
     - returns: Observable<String>
     */
    open class func connectionStatusUsingGET(xDevice: String, acceptLanguage: String, providerId: String) -> Observable<String> {
        return Observable.create { observer -> Disposable in
            connectionStatusUsingGET(xDevice: xDevice, acceptLanguage: acceptLanguage, providerId: providerId) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     connectionStatus
     - GET /connect/{providerId}
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 

     - returns: RequestBuilder<String> 
     */
    open class func connectionStatusUsingGETWithRequestBuilder(xDevice: String, acceptLanguage: String, providerId: String) -> RequestBuilder<String> {
        var path = "/connect/{providerId}"
        path = path.replacingOccurrences(of: "{providerId}", with: "\(providerId)", options: .literal, range: nil)
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     connectionStatus
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func connectionStatusUsingGET1(xDevice: String, acceptLanguage: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        connectionStatusUsingGET1WithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     connectionStatus
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - returns: Observable<String>
     */
    open class func connectionStatusUsingGET1(xDevice: String, acceptLanguage: String) -> Observable<String> {
        return Observable.create { observer -> Disposable in
            connectionStatusUsingGET1(xDevice: xDevice, acceptLanguage: acceptLanguage) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     connectionStatus
     - GET /connect
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 

     - returns: RequestBuilder<String> 
     */
    open class func connectionStatusUsingGET1WithRequestBuilder(xDevice: String, acceptLanguage: String) -> RequestBuilder<String> {
        let path = "/connect"
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     removeConnection
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 
     - parameter providerUserId: (path) providerUserId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeConnectionUsingDELETE(xDevice: String, acceptLanguage: String, providerId: String, providerUserId: String, completion: @escaping ((_ data: RedirectView?,_ error: Error?) -> Void)) {
        removeConnectionUsingDELETEWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage, providerId: providerId, providerUserId: providerUserId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     removeConnection
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 
     - parameter providerUserId: (path) providerUserId 
     - returns: Observable<RedirectView>
     */
    open class func removeConnectionUsingDELETE(xDevice: String, acceptLanguage: String, providerId: String, providerUserId: String) -> Observable<RedirectView> {
        return Observable.create { observer -> Disposable in
            removeConnectionUsingDELETE(xDevice: xDevice, acceptLanguage: acceptLanguage, providerId: providerId, providerUserId: providerUserId) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     removeConnection
     - DELETE /connect/{providerId}/{providerUserId}
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 
     - parameter providerUserId: (path) providerUserId 

     - returns: RequestBuilder<RedirectView> 
     */
    open class func removeConnectionUsingDELETEWithRequestBuilder(xDevice: String, acceptLanguage: String, providerId: String, providerUserId: String) -> RequestBuilder<RedirectView> {
        var path = "/connect/{providerId}/{providerUserId}"
        path = path.replacingOccurrences(of: "{providerId}", with: "\(providerId)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{providerUserId}", with: "\(providerUserId)", options: .literal, range: nil)
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RedirectView>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     removeConnections
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func removeConnectionsUsingDELETE(xDevice: String, acceptLanguage: String, providerId: String, completion: @escaping ((_ data: RedirectView?,_ error: Error?) -> Void)) {
        removeConnectionsUsingDELETEWithRequestBuilder(xDevice: xDevice, acceptLanguage: acceptLanguage, providerId: providerId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**
     removeConnections
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 
     - returns: Observable<RedirectView>
     */
    open class func removeConnectionsUsingDELETE(xDevice: String, acceptLanguage: String, providerId: String) -> Observable<RedirectView> {
        return Observable.create { observer -> Disposable in
            removeConnectionsUsingDELETE(xDevice: xDevice, acceptLanguage: acceptLanguage, providerId: providerId) { data, error in
                if let error = error {
                    observer.on(.error(error as Error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     removeConnections
     - DELETE /connect/{providerId}
     - examples: [{output=none}]
     
     - parameter xDevice: (header) device/os information (informal) 
     - parameter acceptLanguage: (header) language-locale 
     - parameter providerId: (path) providerId 

     - returns: RequestBuilder<RedirectView> 
     */
    open class func removeConnectionsUsingDELETEWithRequestBuilder(xDevice: String, acceptLanguage: String, providerId: String) -> RequestBuilder<RedirectView> {
        var path = "/connect/{providerId}"
        path = path.replacingOccurrences(of: "{providerId}", with: "\(providerId)", options: .literal, range: nil)
        let URLString = BoostMINIAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-Device": xDevice,
            "Accept-Language": acceptLanguage
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<RedirectView>.Type = BoostMINIAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
